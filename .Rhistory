devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
install.packages('bootstrap')
install.packages('boot')
install.packages('coda')
install.packages('DAAG')
install.packages('stats')
install.packages("stats")
devtool::check()
devtools::check()
devtools::check()
devtools::check()
save(airmilrs,file='C:\\Users\\coco\\Desktop\\airmile.csv',compress=TRUE)
airmiles<-read.csv("C:\\Users\\coco\\Desktop\\airmiles.csv")
save(airmiles,file='airmiles/data.rda',compress=TRUE)
save(airmiles,file='data/airmiles.rda',compress=TRUE)
battery<-read.csv("C:\\Users\\coco\\Desktop\\battery.csv")
save(battery,file='data/battery.rda',compress=TRUE)
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools:check()
devtools::check()
writing R
load("D:/code/SA23204174/.RData")
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
install.packages('../StatComp_1.0.tar.gz',repo=NULL)
library(readxl)
a<-read.csv("C:\\Users\\coco\\Desktop\\airmiles")
a<-read.csv("C:\\Users\\coco\\Desktop\\airmiles.csv")
save(a,file='data/airmiles.rda',compress=TRUE)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
?globalVariables
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
?rinvgamma
??rinvgamma
??rdirichlet
devtools::document()
devtools::check()
install.packages('SuppDist')
rinvgamma(1,1,1)
?rinvgamma
library(SuppDist)
install.packages('SuppDists')
??rinvgamma
install.packages('MCMC')
install.packages('mcmc')
install.packages('mcmc')
library(mcmc)
rinvgamma(1,1,1)
rinvgamma(1,1,1)
install.packages('MCMC')
install.packages('mcmc')
install.packages("mcmc")
rinvgamma(1,1,1)
rinvgamma(1,1,1)
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?utils::globalVariables
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
a<-c(2,3,4)
b<-1/a
b
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
library(readxl)
b<-read.table("C:\\Users\\coco\\Desktop\\battery.DAT")
save(b,file='data/battery.rda',compress=TRUE)
attach(battery)
devtools::document()
devtools::check()
b<-read.table("C:\\Users\\coco\\Desktop\\battery.DAT") save(b,file='data/battery.rda',compress=TRUE)
data<-read.table("C:\\Users\\coco\\Desktop\\battery.DAT")
save(data,file='data/data.rda',compress=TRUE)
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::build(vignettes=FALSE)
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
set.seed(12345)
n<-30
x<-rnorm(n,1,1)
I<-pnorm(1,mean(x),1/sqrt(n))-pnorm(-1,mean(x),1/sqrt(n))
BF01<-sqrt(2*n/(n+1)/pi)/I*exp(n*(mean(x)^2-1)/2/(n+1))
set.seed(12345)
n<-30
x<-rnorm(n,1,1)
I<-pnorm(1,mean(x),1/sqrt(n))-pnorm(-1,mean(x),1/sqrt(n))
BF01<-sqrt(2*n/(n+1)/pi)/I*exp(n*(mean(x)^2-1)/2/(n+1))
BF01
set.seed(1116)
n<-30
x<-rnorm(n,1,1)
I<-pnorm(1,mean(x),1/sqrt(n))-pnorm(-1,mean(x),1/sqrt(n))
BF01<-sqrt(2*n/(n+1)/pi)/I*exp(n*(mean(x)^2-1)/2/(n+1))
BF01
set.seed(123)
n<-30
x<-rnorm(n,1,1)
I<-pnorm(1,mean(x),1/sqrt(n))-pnorm(-1,mean(x),1/sqrt(n))
BF01<-sqrt(2*n/(n+1)/pi)/I*exp(n*(mean(x)^2-1)/2/(n+1))
BF01
set.seed(123)
n<-30
x<-rnorm(n,1,1)
I<-pnorm(1,mean(x),1/sqrt(n))-pnorm(-1,mean(x),1/sqrt(n))
BF01<-sqrt(2*n/(n+1)/pi)/I*exp(n*(mean(x)^2-1)/2/(n+1))
BF01
set.seed(2023)
n<-30
x<-rnorm(n,1,1)
I<-pnorm(1,mean(x),1/sqrt(n))-pnorm(-1,mean(x),1/sqrt(n))
BF01<-sqrt(2*n/(n+1)/pi)/I*exp(n*(mean(x)^2-1)/2/(n+1))
BF01
set.seed(1116)
n<-30
x<-rnorm(n,1,1)
I<-pnorm(1,mean(x),1/sqrt(n))-pnorm(-1,mean(x),1/sqrt(n))
BF01<-sqrt(2*n/(n+1)/pi)/I*exp(-n*(mean(x)^2-1)/2/(n+1))
BF01
set.seed(1116)
n<-30
x<-rnorm(n,1,1)
I<-pnorm(1,mean(x),1/sqrt(n))-pnorm(-1,mean(x),1/sqrt(n))
BF01<-sqrt(2*n/(n+1)/pi)/I*exp(-n*(mean(x)^2-1)/2/(n+1))
BF01
set.seed(2023)
n<-30
x<-rnorm(n,1,1)
I<-pnorm(1,mean(x),1/sqrt(n))-pnorm(-1,mean(x),1/sqrt(n))
BF01<-sqrt(2*n/(n+1)/pi)/I*exp(-n*(mean(x)^2-1)/2/(n+1))
BF01
f1<-function(mu)
{
f<-dnorm(mu,1,1)
for(i in 1:n)
f<-f*dnorm(x[i],mu,1)
return(f)
}
f2<-function(mu)
{
f<-1/2*I((mu>=-1)&(mu<=1))
for (i in 1:n)
f<-f*dnorm(x[i],mu,1)
return(f)
}
N<-10000
mu1<-rnorm(N)
m1<-mean(f1(mu1)/dnorm(mu1))
mu2<-2*(rbeta(R,2,2)-0.5)
N<-10000
mu1<-rnorm(N)
m1<-mean(f1(mu1)/dnorm(mu1))
mu2<-2*(rbeta(N,2,2)-0.5)
m2<-mean(f2(mu2)/dbeta(mu2/2+0.5,2,2)*2)
m1/m2
fmu<-function(mu)
{
f<-1
for (i in 1:n)
f<-f*dnorm(mu,x[i],1)
return(f)
}
mu1<-numeric(N)
mu1[1]<-0.5
sigma<-1
u<-runif(N)
for (i in 2:N)
{
y<-rnorm(1,mu1[i-1],sigma)
alpha<-f1(y)/f1(mu1[i-1])
if(u[i]<alpha)
mu1[i]<-y
else
mu1[i]<-mu1[i-1]
}
mu2<-numeric(N)
mu2[1]<-0.5
sigma<-1
u<-runif(N)
for (i in 2:N)
{
y<-rnorm(1,mu2[i-1],sigma)
alpha<-f2(y)/f2(mu2[i-1])
if(u[i]<alpha)
mu2[i]<-y
else
mu2[i]<-mu2[i-1]
}
m1<-1/mean(1/fmu(mu1[-(1:1000)]))
m2<-1/mean(1/fmu(mu2[-(1:1000)]))
m1/m2
set.seed(12345)
n<-30
x<-rnorm(n,1,1)
I<-pnorm(1,mean(x),1/sqrt(n))-pnorm(-1,mean(x),1/sqrt(n))
BF01<-sqrt(2*n/(n+1)/pi)/I*exp(-n*(mean(x)^2-1)/2/(n+1))
BF01
f1<-function(mu)
{
f<-dnorm(mu,1,1)
for(i in 1:n)
f<-f*dnorm(x[i],mu,1)
return(f)
}
f2<-function(mu)
{
f<-1/2*I((mu>=-1)&(mu<=1))
for (i in 1:n)
f<-f*dnorm(x[i],mu,1)
return(f)
}
N<-10000
mu1<-rnorm(N)
m1<-mean(f1(mu1)/dnorm(mu1))
mu2<-2*(rbeta(N,2,2)-0.5)
m2<-mean(f2(mu2)/dbeta(mu2/2+0.5,2,2)*2)
m1/m2
fmu<-function(mu)
{
f<-1
for (i in 1:n)
f<-f*dnorm(mu,x[i],1)
return(f)
}
mu1<-numeric(N)
mu1[1]<-0.5
sigma<-1
u<-runif(N)
for (i in 2:N)
{
y<-rnorm(1,mu1[i-1],sigma)
alpha<-f1(y)/f1(mu1[i-1])
if(u[i]<alpha)
mu1[i]<-y
else
mu1[i]<-mu1[i-1]
}
mu2<-numeric(N)
mu2[1]<-0.5
sigma<-1
u<-runif(N)
for (i in 2:N)
{
y<-rnorm(1,mu2[i-1],sigma)
alpha<-f2(y)/f2(mu2[i-1])
if(u[i]<alpha)
mu2[i]<-y
else
mu2[i]<-mu2[i-1]
}
m1<-1/mean(1/fmu(mu1[-(1:1000)]))
m2<-1/mean(1/fmu(mu2[-(1:1000)]))
m1/m2
install.packages('D:/code/SA23204174.tar.gz',repo=NULL)
devtools::build(vignettes=FALSE)
install.packages('D:/code/SA23204174_1.0.tar.gz',repo=NULL)
